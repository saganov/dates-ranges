# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      #- image: circleci/php:7.1-node-browsers
      - image: saganov/php:7.2.16-fpm-nginx-stretch
        command: ["/run.sh"]

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      - image: circleci/mysql:5.7-ram
        environment:
          - MYSQL_ROOT_PASSWORD=root
          - MYSQL_ALLOW_EMPTY_PASSWORD=true
          - MYSQL_DATABASE=ranges
    working_directory: /var/www/html

    steps:
      - checkout

      #- run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      #- run: sudo docker-php-ext-install zip

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "composer.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.lock" }}
          paths:
            - ./vendor
#      - restore_cache:
#          keys:
#            - node-v1-{{ checksum "package.json" }}
#            - node-v1-
#      - run: yarn install
#      - save_cache:
#          key: node-v1-{{ checksum "package.json" }}
#          paths:
#            - node_modules

      - run: docker-php-ext-install mysqli # && docker-php-ext-enable mysqli
      # prepare the database
      #- run: touch storage/testing.sqlite
      #- run: php artisan migrate --env=testing --database=sqlite_testing --force
      - run: ./vendor/bin/phinx migrate -e circleci

      # run tests with phpunit or codecept
      #- run: ./vendor/bin/phpunit
      #- run: ./vendor/bin/codecept build
      - run: cp tests/acceptance.suite.example.yml tests/acceptance.suite.yml
      #- run: cp tests/api.suite.example.yml tests/api.suite.yml
      #- run: cp tests/functional.suite.example.yml tests/functional.suite.yml
      - run: ./vendor/bin/codecept run